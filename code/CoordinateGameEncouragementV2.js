var current_x = 0;
var current_y = 0;




async function startProgram() {
	var target_x = 50;
	var target_y = 50;
	var old_x = 0
	var old_y = 0
//	const maxDistance = calculateDistance(0, 0, target_x, target_y);
	

	//await speak('This is the max distance!', true);
	//await delay(1);


	var new_distance = calculateDistance(old_x, old_y, target_x, target_y);
	var maximumDistance = new_distance*1.1;
	//await speak(buildString(maximumDistance));
	//await speak("This is the distance variable");
	//await speak(buildString(new_distance));
	while (new_distance > 10) {
				
		old_x = getLocation().x;
		old_y = getLocation().y;
		new_distance = calculateDistance(old_x, old_y, target_x, target_y);
		await speak(buildString(new_distance));
		await delay(0.25);
		colors = scaleColor(new_distance, maximumDistance);
//		await speak(buildString(colors[0]), true);
//		await speak(buildString(colors[1]), true);
		newColor = { r: colors[0], g: 0, b: colors[1] }
		setMainLed(newColor);
		if (getElapsedTime() > 180){
			await Sound.Game.YouLose.play(true);
			await speak("Aww man, you guys were so close");
			await speak("Time is up, better luck next time!");
			await speak("Try to work together to create a strategy for next round");
			exitProgram();
		}
		
		if (35 >= getElapsedTime() && getElapsedTime() > 30) {
			await speak("Keep working together you guys got it!");
		}
		if (65 >= getElapsedTime() && getElapsedTime() > 60) {
			await speak("If anyone is wearing black suggest a new way to solve the problem!");
		}
		if (95 >= getElapsedTime() && getElapsedTime() > 90) {
			await speak("Together we can overcome any challenge. Keep puuuuuushing forward...");
		}
		if (125 >= getElapsedTime() && getElapsedTime() > 120) {
			await speak("Many brains are better than one brain, use your mega brain to figure me out");
		}
		
		if (new_distance > maximumDistance){
			playMatrixAnimation(1, false);
			await speak("Brrrrrrr, You're as cold as an iceberg over there!"); 
		}
		
		if ( 15 > new_distance){
			playMatrixAnimation(2, false);
			await speak("OUCH! Pipe Pipe Piping HOT"); 
		}
	}
	await Sound.Effects.Magic.play(true);
	await speak('Nice job!', true);
	playMatrixAnimation(0, true);
}

function scaleColor(distance, maxDistance) {
    const scaledDistance = Math.min(distance/maxDistance, 1.0);
	// await speak(buildString(distance), true);

    
    const redValue = Math.floor((1 - scaledDistance) * 255);
    const blueValue = Math.floor(scaledDistance * 255);
//	await speak(buildString(redValue), true);


    return [redValue, blueValue];
}
function calculateDistance(x, y, xt, yt) {
	distance = Math.sqrt((xt - x)**2 + (yt - y)**2);
	return distance;

}


registerMatrixAnimation({
	frames: [[[6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6], [1, 1, 1, 6, 6, 1, 1, 1], [1, 1, 1, 6, 6, 1, 1, 1], [1, 1, 1, 6, 6, 1, 1, 1], [1, 1, 1, 6, 6, 1, 1, 1], [1, 1, 1, 6, 6, 1, 1, 1], [1, 1, 1, 6, 6, 1, 1, 1]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 11, 11, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 10, 10, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 175, g: 0, b: 255 }, { r: 255, g: 1, b: 165 }, { r: 255, g: 1, b: 122 }, { r: 255, g: 2, b: 56 }],
	fps: 23,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 2, 2, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]], [[1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 2, 2, 2, 2, 1, 1], [1, 1, 2, 2, 2, 2, 1, 1]], [[1, 2, 2, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 2, 2, 1]], [[1, 4, 4, 4, 4, 4, 4, 1], [1, 4, 2, 2, 2, 2, 4, 1], [1, 4, 2, 4, 4, 2, 4, 1], [1, 4, 2, 4, 4, 2, 4, 1], [1, 4, 2, 4, 4, 2, 4, 1], [1, 4, 2, 4, 4, 2, 4, 1], [1, 4, 2, 2, 2, 2, 4, 1], [1, 4, 4, 4, 4, 4, 4, 1]], [[2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 4, 4, 4, 4, 2, 2], [2, 2, 4, 2, 2, 4, 2, 2], [2, 2, 4, 2, 2, 4, 2, 2], [2, 2, 4, 2, 2, 4, 2, 2], [2, 2, 4, 2, 2, 4, 2, 2], [2, 2, 4, 4, 4, 4, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2]], [[4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 4, 4], [4, 4, 2, 4, 4, 2, 4, 4], [4, 4, 2, 4, 4, 2, 4, 4], [4, 4, 2, 4, 4, 2, 4, 4], [4, 4, 2, 4, 4, 2, 4, 4], [4, 4, 2, 2, 2, 2, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});

