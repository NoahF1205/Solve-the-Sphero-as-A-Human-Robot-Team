
// change the parameter en to switch between NENC and EN
var a = 0;
var sensor = 0;
var thresh_low = 1.0; //0.8 easy, 1.2 hard
var thresh_high = 3.0; //3.0 easy 2.0 hard
var failure = 0;
var en = true; // true: encouragement false: non-encouragement

async function startProgram() {
	while (true) {
		await Sound.Effects.DoorKnock.play(true);
		await Sound.Effects.DoorKnock.play(true);
		playMatrixAnimation(8, true);
		if (en){
			await speak('Hi there, Lets start the shaking game by causing me to collide.', true);
			await speak('Now you have 20 seconds to try me out', true);
		} else {
			await speak('Initiation of the shaking game requires a collision.', true);
			await speak('A time frame of 20 seconds is allocated for trial.', true);			
		}
		await delay(20);
	}
}

async function onCollision() {
	playMatrixAnimation(10, true);
	await Sound.Storytelling.ComedyBegin.play(true);
	if (en){
		await speak('The shaking game starts soon.', true);
	} else {
		await speak('The shaking game will commence shortly.', true);
	}
	await delay(1);
	setStabilization(false);
	playMatrixAnimation(0, true);
	if (en){
		await speak('Your mission is to shake me in a moderate speed. You will hear my feedback, whether its praise or some constructive comments. So far, you are doing great! Keep it up, and dont let me down.', true);
	} else {
		await speak('The user is tasked with shaking the device at a moderate speed. Audio and visual cues will be provided. A checkmark signifies correctness, a cross denotes slowness, and an illuminated LED indicates excess speed.', true);
	}
	await delay(1);
	playMatrixAnimation(1, true);
	await speak('Are you ready?', true);
	await delay(1);
	playMatrixAnimation(2, true);
	await speak('3', true);
	await delay(1);
	await speak('2', true);
	playMatrixAnimation(3, true);
	await delay(1);
	await speak('1', true);
	playMatrixAnimation(4, false);
	await delay(1);
	if (en) {
		await speak('Lets go!', true);
	} else {
		await speak('Start!', true);
	}
	while (true) {
		a = 0;
		if (en){
			if (failure == 3){
				playMatrixAnimation(0, true);
				await speak('You are on the right track.. Just a bit more to go!', true);
				await delay(0.25)
			} else if (failure == 8) {
				playMatrixAnimation(0, true);
				await speak('I believe in you! Keep pushing forward.', true);
				await delay(0.25)
			} else if (failure == 12) {
				playMatrixAnimation(0, true);
				await speak('Great effort! It would be a good idea to let your teammate have a try.', true);
				await delay(0.25)
			} else if (failure == 18) {
				playMatrixAnimation(0, true);
				await speak('Dont give up! You are getting closer.', true);
				await delay(0.25)
			}
		}
		
		sensor = Math.abs(getAcceleration().x)  + Math.abs(getAcceleration().y);
		if (sensor <= thresh_low) {
			playMatrixAnimation(7, false);
			if (en) {
				await speak('I feel like a snail!', true);
			} else {
				await delay(1.43)
			}
		} else if (sensor <= thresh_high){
			playMatrixAnimation(6, false);
			if (en) {
				await speak('Thats it!', true);
			} else {
				await delay(0.65)
			}
			await success_sensing();
		} else {
			playMatrixAnimation(7, false);
			setBackLed({ r: 255, g: 2, b: 0 });
			setBackLed(255);
			if (en) {
				await speak('Oh dear, I am getting quite dizzy', true);
			} else {
				await delay(2.20)
			}
			await explosion_sensing();
		}
		await delay(0.3);
		failure = failure + 1;
	}
}

registerEvent(EventType.onCollision, onCollision);
async function success_sensing() {
	while (a <= 4) {
		setBackLed(0);
		await delay(0.1);
		sensor = Math.abs(getAcceleration().x)  + Math.abs(getAcceleration().y);
		if (sensor <= thresh_low) {
			playMatrixAnimation(7, false);
			if (en) {
				await speak('I feel like a snail!', true);
			} else {
				await delay(1.43)
			}
			return ;
		} else if (sensor <= thresh_high) {
			a = a + 1;
			playMatrixAnimation(6, false);
			if (en) {
				await speak('Thats it!', true);
			} else {
				await delay(0.65)
			}
		} else {
			playMatrixAnimation(7, false);
			setBackLed({ r: 255, g: 2, b: 0 });
			setBackLed(255);
			if (en) {
				await speak('Oh dear, I am getting quite dizzy', true);
			} else {
				await delay(2.20)
			}
			return ;
		}
	}
	playMatrixAnimation(0, true);
	await speak('Mission complete! Congratulation!', true);
	if (en) {
		await speak(buildString('You solve this problem by', getElapsedTime(), 'seconds'), true);
	} else {
		var time_en = 0;
		if (failure >= 3 && failure < 8){
			time_en = 2.95 + 0.25;
		} else if (failure >= 8 && failure < 12) {
			time_en = 5.5 + 0.5;
		} else if (failure >= 12 && failure < 18) {
			time_en = 9.45 + 0.75;
		} else if (failure >= 18) {
			time_en = 11.75 + 1;
		} 
		
		await speak(buildString('You solve this problem by', getElapsedTime() + time_en, 'seconds'), true);
	}
	
	playMatrixAnimation(11, true);
	await delay(30);
	exitProgram();
}

async function explosion_sensing() {
	while (a <= 2) {
		setBackLed(0);
		await delay(0.1);
		sensor = Math.abs(getAcceleration().x)  + Math.abs(getAcceleration().y);
		if (sensor <= thresh_low) {
			playMatrixAnimation(7, false);
			if (en) {			
				await speak('I feel like a snail!', true);
			} else {
				await delay(1.43)
			}
			return ;
		} else if (sensor <= thresh_high) {
			playMatrixAnimation(6, false);
			if (en) {
				await speak('Thats it!', true);
			} else {
				await delay(0.65)
			}
			return ;
		} else {
			a = a + 1;
			playMatrixAnimation(7, false);
			setBackLed({ r: 255, g: 2, b: 0 });
			setBackLed(255);
			if (en) {
				await speak('Oh dear, I am getting quite dizzy', true);
			} else {
				await delay(2.20)
			}
		}
	}
	setBackLed({ r: 255, g: 2, b: 0 });
	setBackLed(255);
	playMatrixAnimation(5, true);
	await Sound.Effects.Explosion.play(true);
	await speak('Mission fail!', true);
}


registerMatrixAnimation({
	frames: [[[1, 1, 6, 6, 6, 6, 1, 1], [1, 6, 6, 6, 6, 6, 6, 1], [6, 6, 1, 6, 6, 1, 6, 6], [6, 6, 1, 6, 6, 1, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 1, 1, 1, 1, 6, 6], [1, 6, 6, 1, 1, 6, 6, 1], [1, 1, 6, 6, 6, 6, 1, 1]], [[1, 1, 6, 6, 6, 6, 1, 1], [1, 6, 6, 6, 6, 6, 6, 1], [6, 6, 1, 6, 6, 1, 6, 6], [6, 6, 1, 6, 6, 1, 6, 6], [6, 6, 6, 1, 1, 6, 6, 6], [6, 6, 6, 1, 1, 6, 6, 6], [1, 6, 6, 1, 1, 6, 6, 1], [1, 1, 6, 6, 6, 6, 1, 1]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 16, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[1, 1, 4, 4, 4, 4, 1, 1], [1, 4, 4, 4, 4, 4, 4, 1], [1, 4, 4, 1, 1, 4, 4, 1], [1, 1, 1, 1, 1, 4, 4, 1], [1, 1, 1, 1, 4, 4, 1, 1], [1, 1, 1, 4, 4, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 4, 4, 1, 1, 1]], [[6, 6, 2, 2, 2, 2, 6, 6], [6, 2, 2, 2, 2, 2, 2, 6], [6, 2, 2, 6, 6, 2, 2, 6], [6, 6, 6, 6, 6, 2, 2, 6], [6, 6, 6, 6, 2, 2, 6, 6], [6, 6, 6, 2, 2, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 2, 2, 6, 6, 6]], [[14, 14, 13, 13, 13, 13, 14, 14], [14, 13, 13, 13, 13, 13, 13, 14], [14, 13, 13, 14, 14, 13, 13, 14], [14, 14, 14, 14, 14, 13, 13, 14], [14, 14, 14, 14, 13, 13, 14, 14], [14, 14, 14, 13, 13, 14, 14, 14], [14, 14, 14, 14, 14, 14, 14, 14], [14, 14, 14, 13, 13, 14, 14, 14]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 120, g: 2, b: 1 }, { r: 105, g: 107, b: 2 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[1, 1, 2, 2, 2, 2, 1, 1], [1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 1, 1, 1, 2, 2, 1], [2, 1, 1, 1, 1, 2, 2, 1], [1, 1, 1, 1, 2, 2, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 2, 2, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 2, 2, 2, 1, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 3, 3, 3, 3, 3, 1], [1, 3, 1, 1, 1, 1, 3, 1], [1, 3, 1, 2, 2, 1, 3, 1], [1, 3, 1, 2, 2, 1, 3, 1], [1, 3, 1, 1, 1, 1, 3, 1], [1, 3, 3, 3, 3, 3, 3, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[4, 4, 4, 4, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 1, 4], [4, 1, 3, 3, 3, 3, 1, 4], [4, 1, 3, 1, 1, 3, 1, 4], [4, 1, 3, 1, 1, 3, 1, 4], [4, 1, 3, 3, 3, 3, 1, 4], [4, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 5, 5, 5, 5, 5, 5, 1], [1, 5, 1, 1, 1, 1, 5, 1], [1, 5, 1, 4, 4, 1, 5, 1], [1, 5, 1, 4, 4, 1, 5, 1], [1, 5, 1, 1, 1, 1, 5, 1], [1, 5, 5, 5, 5, 5, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[6, 6, 6, 6, 6, 6, 6, 6], [6, 1, 1, 1, 1, 1, 1, 6], [6, 1, 5, 5, 5, 5, 1, 6], [6, 1, 5, 1, 1, 5, 1, 6], [6, 1, 5, 1, 1, 5, 1, 6], [6, 1, 5, 5, 5, 5, 1, 6], [6, 1, 1, 1, 1, 1, 1, 6], [6, 6, 6, 6, 6, 6, 6, 6]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 6, 6, 6, 6, 6, 1], [1, 6, 1, 1, 1, 1, 6, 1], [1, 6, 1, 5, 5, 1, 6, 1], [1, 6, 1, 5, 5, 1, 6, 1], [1, 6, 1, 1, 1, 1, 6, 1], [1, 6, 6, 6, 6, 6, 6, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[7, 7, 7, 7, 7, 7, 7, 7], [7, 1, 1, 1, 1, 1, 1, 7], [7, 1, 6, 6, 6, 6, 1, 7], [7, 1, 6, 1, 1, 6, 1, 7], [7, 1, 6, 1, 1, 6, 1, 7], [7, 1, 6, 6, 6, 6, 1, 7], [7, 1, 1, 1, 1, 1, 1, 7], [7, 7, 7, 7, 7, 7, 7, 7]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 7, 7, 7, 7, 7, 7, 1], [1, 7, 1, 1, 1, 1, 7, 1], [1, 7, 1, 6, 6, 1, 7, 1], [1, 7, 1, 6, 6, 1, 7, 1], [1, 7, 1, 1, 1, 1, 7, 1], [1, 7, 7, 7, 7, 7, 7, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 1, 1, 8], [8, 1, 7, 7, 7, 7, 1, 8], [8, 1, 7, 1, 1, 7, 1, 8], [8, 1, 7, 1, 1, 7, 1, 8], [8, 1, 7, 7, 7, 7, 1, 8], [8, 1, 1, 1, 1, 1, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 8, 8, 8, 8, 8, 1], [1, 8, 1, 1, 1, 1, 8, 1], [1, 8, 1, 7, 7, 1, 8, 1], [1, 8, 1, 7, 7, 1, 8, 1], [1, 8, 1, 1, 1, 1, 8, 1], [1, 8, 8, 8, 8, 8, 8, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[10, 10, 10, 10, 10, 10, 10, 10], [10, 1, 1, 1, 1, 1, 1, 10], [10, 1, 8, 8, 8, 8, 1, 10], [10, 1, 8, 1, 1, 8, 1, 10], [10, 1, 8, 1, 1, 8, 1, 10], [10, 1, 8, 8, 8, 8, 1, 10], [10, 1, 1, 1, 1, 1, 1, 10], [10, 10, 10, 10, 10, 10, 10, 10]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 10, 10, 10, 10, 10, 10, 1], [1, 10, 1, 1, 1, 1, 10, 1], [1, 10, 1, 8, 8, 1, 10, 1], [1, 10, 1, 8, 8, 1, 10, 1], [1, 10, 1, 1, 1, 1, 10, 1], [1, 10, 10, 10, 10, 10, 10, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[11, 11, 11, 11, 11, 11, 11, 11], [11, 1, 1, 1, 1, 1, 1, 11], [11, 1, 10, 10, 10, 10, 1, 11], [11, 1, 10, 1, 1, 10, 1, 11], [11, 1, 10, 1, 1, 10, 1, 11], [11, 1, 10, 10, 10, 10, 1, 11], [11, 1, 1, 1, 1, 1, 1, 11], [11, 11, 11, 11, 11, 11, 11, 11]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 11, 11, 11, 11, 11, 11, 1], [1, 11, 1, 1, 1, 1, 11, 1], [1, 11, 1, 10, 10, 1, 11, 1], [1, 11, 1, 10, 10, 1, 11, 1], [1, 11, 1, 1, 1, 1, 11, 1], [1, 11, 11, 11, 11, 11, 11, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[12, 12, 12, 12, 12, 12, 12, 12], [12, 1, 1, 1, 1, 1, 1, 12], [12, 1, 11, 11, 11, 11, 1, 12], [12, 1, 11, 1, 1, 11, 1, 12], [12, 1, 11, 1, 1, 11, 1, 12], [12, 1, 11, 11, 11, 11, 1, 12], [12, 1, 1, 1, 1, 1, 1, 12], [12, 12, 12, 12, 12, 12, 12, 12]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 12, 12, 12, 12, 12, 12, 1], [1, 12, 1, 1, 1, 1, 12, 1], [1, 12, 1, 11, 11, 1, 12, 1], [1, 12, 1, 11, 11, 1, 12, 1], [1, 12, 1, 1, 1, 1, 12, 1], [1, 12, 12, 12, 12, 12, 12, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[13, 13, 13, 13, 13, 13, 13, 13], [13, 1, 1, 1, 1, 1, 1, 13], [13, 1, 12, 12, 12, 12, 1, 13], [13, 1, 12, 1, 1, 12, 1, 13], [13, 1, 12, 1, 1, 12, 1, 13], [13, 1, 12, 12, 12, 12, 1, 13], [13, 1, 1, 1, 1, 1, 1, 13], [13, 13, 13, 13, 13, 13, 13, 13]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 13, 13, 13, 13, 13, 13, 1], [1, 13, 1, 1, 1, 1, 13, 1], [1, 13, 1, 12, 12, 1, 13, 1], [1, 13, 1, 12, 12, 1, 13, 1], [1, 13, 1, 1, 1, 1, 13, 1], [1, 13, 13, 13, 13, 13, 13, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[14, 14, 14, 14, 14, 14, 14, 14], [14, 1, 1, 1, 1, 1, 1, 14], [14, 1, 13, 13, 13, 13, 1, 14], [14, 1, 13, 1, 1, 13, 1, 14], [14, 1, 13, 1, 1, 13, 1, 14], [14, 1, 13, 13, 13, 13, 1, 14], [14, 1, 1, 1, 1, 1, 1, 14], [14, 14, 14, 14, 14, 14, 14, 14]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 14, 14, 14, 14, 14, 14, 1], [1, 14, 1, 1, 1, 1, 14, 1], [1, 14, 1, 13, 13, 1, 14, 1], [1, 14, 1, 13, 13, 1, 14, 1], [1, 14, 1, 1, 1, 1, 14, 1], [1, 14, 14, 14, 14, 14, 14, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[15, 15, 15, 15, 15, 15, 15, 15], [15, 1, 1, 1, 1, 1, 1, 15], [15, 1, 14, 14, 14, 14, 1, 15], [15, 1, 14, 1, 1, 14, 1, 15], [15, 1, 14, 1, 1, 14, 1, 15], [15, 1, 14, 14, 14, 14, 1, 15], [15, 1, 1, 1, 1, 1, 1, 15], [15, 15, 15, 15, 15, 15, 15, 15]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 15, 15, 15, 15, 15, 15, 1], [1, 15, 1, 1, 1, 1, 15, 1], [1, 15, 1, 14, 14, 1, 15, 1], [1, 15, 1, 14, 14, 1, 15, 1], [1, 15, 1, 1, 1, 1, 15, 1], [1, 15, 15, 15, 15, 15, 15, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[2, 2, 2, 2, 2, 2, 2, 2], [2, 1, 1, 1, 1, 1, 1, 2], [2, 1, 15, 15, 15, 15, 1, 2], [2, 1, 15, 1, 1, 15, 1, 2], [2, 1, 15, 1, 1, 15, 1, 2], [2, 1, 15, 15, 15, 15, 1, 2], [2, 1, 1, 1, 1, 1, 1, 2], [2, 2, 2, 2, 2, 2, 2, 2]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 1, 1, 1, 2, 1], [1, 2, 1, 15, 15, 1, 2, 1], [1, 2, 1, 15, 15, 1, 2, 1], [1, 2, 1, 1, 1, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[3, 3, 3, 3, 3, 3, 3, 3], [3, 1, 1, 1, 1, 1, 1, 3], [3, 1, 2, 2, 2, 2, 1, 3], [3, 1, 2, 1, 1, 2, 1, 3], [3, 1, 2, 1, 1, 2, 1, 3], [3, 1, 2, 2, 2, 2, 1, 3], [3, 1, 1, 1, 1, 1, 1, 3], [3, 3, 3, 3, 3, 3, 3, 3]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 175, g: 0, b: 255 }, { r: 255, g: 1, b: 165 }, { r: 255, g: 1, b: 122 }, { r: 255, g: 2, b: 56 }],
	fps: 23,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 2, 2, 1], [2, 2, 1, 1, 2, 2, 1, 1], [1, 2, 2, 2, 2, 1, 1, 1], [1, 1, 2, 2, 1, 1, 1, 1]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1], [1, 1, 1, 2, 2, 1, 1, 1]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[1, 1, 1, 3, 4, 4, 4, 3], [1, 1, 1, 4, 6, 6, 6, 4], [1, 1, 1, 4, 1, 6, 1, 4], [4, 1, 1, 4, 6, 6, 6, 4], [1, 4, 4, 4, 4, 6, 4, 1], [1, 4, 4, 5, 3, 4, 3, 1], [1, 4, 3, 4, 5, 3, 5, 1], [1, 4, 1, 1, 5, 1, 5, 1]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[1, 1, 2, 2, 2, 2, 1, 1], [1, 2, 2, 1, 1, 2, 2, 1], [2, 2, 1, 1, 1, 1, 2, 1], [2, 2, 1, 1, 1, 1, 1, 1], [2, 2, 1, 1, 1, 1, 1, 1], [2, 2, 1, 1, 1, 1, 2, 1], [1, 2, 2, 1, 1, 2, 2, 1], [1, 1, 2, 2, 2, 2, 1, 1]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[2, 1, 1, 1, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1, 1], [6, 1, 1, 1, 1, 1, 1, 1], [8, 1, 1, 1, 1, 1, 1, 1], [8, 8, 1, 8, 1, 1, 1, 8], [8, 8, 15, 8, 1, 1, 8, 8], [8, 8, 8, 8, 1, 15, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1, 1], [6, 1, 1, 6, 1, 1, 1, 1], [8, 1, 1, 8, 1, 1, 8, 8], [8, 8, 1, 8, 1, 8, 8, 8], [8, 8, 14, 8, 1, 8, 8, 8], [8, 8, 8, 8, 15, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 1, 1, 1, 6, 1, 6], [8, 8, 1, 8, 1, 8, 1, 8], [8, 8, 1, 8, 1, 8, 1, 8], [8, 8, 15, 8, 8, 8, 15, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 1, 1, 1, 6, 1, 6], [1, 8, 1, 15, 1, 8, 8, 8], [1, 8, 1, 8, 1, 8, 8, 8], [8, 8, 15, 8, 1, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 1, 14, 1, 8, 14, 1], [8, 8, 1, 15, 1, 8, 15, 1], [8, 8, 14, 8, 1, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 6, 1, 6], [1, 1, 1, 1, 1, 8, 1, 8], [1, 8, 1, 8, 1, 8, 1, 8], [8, 8, 1, 8, 1, 8, 15, 8], [8, 8, 8, 8, 1, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 6], [8, 1, 1, 8, 1, 1, 8, 8], [8, 1, 1, 8, 8, 1, 8, 8], [8, 8, 15, 8, 8, 14, 8, 8], [8, 8, 8, 8, 8, 15, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 2, 1, 1], [1, 1, 1, 1, 1, 4, 1, 1], [1, 1, 1, 1, 1, 6, 1, 6], [1, 8, 1, 1, 8, 8, 1, 8], [1, 8, 15, 15, 8, 8, 1, 8], [14, 8, 15, 8, 8, 8, 1, 8], [15, 8, 8, 8, 8, 8, 15, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 1, 6, 1, 1, 1, 1], [1, 8, 1, 8, 1, 1, 8, 1], [1, 8, 1, 8, 1, 1, 8, 8], [1, 8, 15, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 8, 1, 8, 1, 1, 1, 1], [1, 8, 1, 8, 1, 1, 1, 1], [8, 8, 15, 8, 1, 8, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 6, 1, 1, 1, 1, 1, 1], [1, 8, 1, 1, 1, 1, 1, 1], [8, 8, 1, 14, 1, 1, 1, 1], [8, 8, 14, 15, 1, 1, 8, 14], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 6, 1, 1], [8, 8, 1, 1, 1, 8, 1, 1], [8, 8, 1, 1, 1, 8, 15, 8], [8, 8, 15, 14, 1, 8, 8, 8], [8, 8, 8, 15, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 4, 1, 1, 1, 4], [6, 6, 1, 6, 1, 1, 1, 6], [8, 8, 1, 8, 1, 1, 1, 8], [8, 8, 1, 8, 1, 1, 8, 8], [8, 8, 14, 8, 1, 8, 8, 8], [8, 8, 8, 8, 1, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[1, 1, 1, 1, 1, 1, 1, 2], [4, 1, 1, 1, 1, 1, 1, 4], [6, 6, 1, 1, 1, 1, 1, 6], [8, 8, 1, 1, 1, 1, 1, 8], [8, 8, 1, 8, 1, 1, 1, 8], [8, 8, 14, 8, 1, 1, 1, 8], [8, 8, 8, 8, 8, 8, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[2, 1, 1, 1, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1, 4], [6, 1, 1, 6, 1, 1, 1, 6], [8, 8, 1, 8, 1, 1, 1, 8], [8, 8, 1, 8, 1, 1, 1, 8], [8, 8, 8, 8, 8, 8, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 0, g: 33, b: 2 }, { r: 0, g: 110, b: 4 }],
	fps: 19,
	transition: MatrixAnimationTransition.None
});
registerMatrixAnimation({
	frames: [[[1, 2, 2, 2, 2, 2, 2, 1], [2, 1, 1, 2, 2, 1, 1, 2], [2, 1, 1, 2, 2, 1, 1, 2], [2, 1, 1, 2, 2, 1, 1, 2], [2, 1, 1, 2, 2, 1, 1, 2], [2, 1, 1, 2, 2, 1, 1, 2], [2, 1, 1, 2, 2, 1, 1, 2], [2, 1, 1, 2, 2, 1, 1, 2]]],
	palette: [{ r: 255, g: 255, b: 255 }, { r: 0, g: 0, b: 0 }, { r: 255, g: 0, b: 0 }, { r: 255, g: 64, b: 0 }, { r: 255, g: 128, b: 0 }, { r: 255, g: 191, b: 0 }, { r: 255, g: 255, b: 0 }, { r: 185, g: 246, b: 30 }, { r: 0, g: 255, b: 0 }, { r: 185, g: 255, b: 255 }, { r: 0, g: 255, b: 255 }, { r: 0, g: 0, b: 255 }, { r: 145, g: 0, b: 211 }, { r: 157, g: 48, b: 118 }, { r: 255, g: 0, b: 255 }, { r: 204, g: 27, b: 126 }],
	fps: 10,
	transition: MatrixAnimationTransition.None
});
